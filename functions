## functions
##

# Cleanup the known_hosts when needed.
cleanssh() {
  # Remove the line matching $1 from ~/.ssh/known_hosts.
  if [[ $# -eq 0 ]]
    then
        echo "Usage: enter line # or hostname to remove from .ssh/known_hosts"
        echo "A hostname (or part of) will be removed."
        echo "Line # should start with ':'"
    else
    # backup
    mv $HOME/.ssh/known_hosts $HOME/.ssh/known_hosts.bak

    remove=`echo "$1" | tr -d ':'`
    echo Will remove: $remove ...
    while true
    do
    case "$1" in
    :[0-9]*)    echo "removing line #$remove..."
            sed ''$remove'd' $HOME/.ssh/known_hosts.bak > $HOME/.ssh/known_hosts
            break ;;
    *)      echo "removing host $1..."
            grep -v $1 $HOME/.ssh/known_hosts.bak >$HOME/.ssh/known_hosts
            break ;;
    esac
    done
  fi
}

## get the size of directories or the current one
## if no arguments given
function fs() {
    if du -d 1 /dev/null > /dev/null 2>&1; then
        local arg="-chd 1"
    else
        local arg="-ch --max-depth 1"
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}

# All the dig info
function digga() {
  if [[ $# -eq 0 ]]; then
    echo "Usage: digga hostanme.domain for a single line result"
  else
    dig +nocmd "$1" any +multiline +noall +answer
  fi
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
  if [[ $# -eq 0 ]]; then
    echo "Usage: Print UTF-8 characters into their 3-byte format"
  else
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
    echo # newline
  fi
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  if [[ $# -eq 0 ]]; then
    echo "Usage: Decode \x{ABCD}-style Unicode escape sequences"
  else
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
    echo # newline
  fi
}

# Get a (emoji) character’s Unicode code point
function codepoint() {
  if [[ $# -eq 0 ]]; then
    echo "Usage: Get a (emoji) character’s Unicode code point"
  else
    perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
    echo # newline
  fi
}

rot13() {
  # ROT13-encode text. Works for decoding, too! ;)
  alias rot13='tr a-zA-Z n-za-mN-ZA-M'
}

shshconf() {
  # prints ssh config if exists
  if [ -r ~/.ssh/config ]; then
    cat ~/.ssh/config
  else
    echo "No ssh config found"
  fi
}

function openfiles() {
  # Monitor IO in real-time (open files etc).
  sudo dtrace -n 'syscall::open*:entry { printf("%s %s",execname,copyinstr(arg0)); }'
}

function a() {
  # `a` with no arguments opens the current directory in Atom Editor, otherwise
  # opens the given location
  if which -s atom; then
    if [ $# -eq 0 ]; then
        atom .;
    else
        atom "$@";
    fi
  fi
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
    local tmpFile="${@%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar using \`${cmd}\`…";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";
    echo "${tmpFile}.gz created successfully.";
}

# 4 lulz - make it look like I'm busy
function compute() {
  while true; do head -n 100 /dev/urandom; sleep 0.1; done \
    | hexdump -C | grep "ca fe"
}
